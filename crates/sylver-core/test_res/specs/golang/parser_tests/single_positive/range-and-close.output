File {
. ● name: Identifier { main }
. ● decls: List {
. . ImportDecl {
. . . ● specs: List {
. . . . ImportSpec {
. . . . . ● path: InterpretedStringLit { "fmt" }
. . . . }
. . . }
. . }
. . FuncDecl {
. . . ● name: Identifier { fibonacci }
. . . ● type: FuncType {
. . . . ● params: List {
. . . . . FuncTypeParam {
. . . . . . ● names: List {
. . . . . . . Identifier { n }
. . . . . . }
. . . . . . ● type: TypeIdent {
. . . . . . . ● name: Identifier { int }
. . . . . . }
. . . . . }
. . . . . FuncTypeParam {
. . . . . . ● names: List {
. . . . . . . Identifier { c }
. . . . . . }
. . . . . . ● type: ChanType {
. . . . . . . ● elemsType: TypeIdent {
. . . . . . . . ● name: Identifier { int }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . }
. . . }
. . . ● body: BlockStmt {
. . . . ● list: List {
. . . . . ShortVarDecl {
. . . . . . ● names: List {
. . . . . . . Identifier { x }
. . . . . . . Identifier { y }
. . . . . . }
. . . . . . ● values: List {
. . . . . . . IntLit { 0 }
. . . . . . . IntLit { 1 }
. . . . . . }
. . . . . }
. . . . . ForStmt {
. . . . . . ● clause: ForClause {
. . . . . . . ● initializer: ShortVarDecl {
. . . . . . . . ● names: List {
. . . . . . . . . Identifier { i }
. . . . . . . . }
. . . . . . . . ● values: List {
. . . . . . . . . IntLit { 0 }
. . . . . . . . }
. . . . . . . }
. . . . . . . ● condition: BinOp {
. . . . . . . . ● left: Identifier { i }
. . . . . . . . ● op: Inf { < }
. . . . . . . . ● right: Identifier { n }
. . . . . . . }
. . . . . . . ● update: UnOp {
. . . . . . . . ● value: Identifier { i }
. . . . . . . . ● op: Increment { ++ }
. . . . . . . }
. . . . . . }
. . . . . . ● body: BlockStmt {
. . . . . . . ● list: List {
. . . . . . . . SendStmt {
. . . . . . . . . ● channel: Identifier { c }
. . . . . . . . . ● value: Identifier { x }
. . . . . . . . }
. . . . . . . . AssignStmt {
. . . . . . . . . ● lhs: List {
. . . . . . . . . . Identifier { x }
. . . . . . . . . . Identifier { y }
. . . . . . . . . }
. . . . . . . . . ● rhs: List {
. . . . . . . . . . Identifier { y }
. . . . . . . . . . BinOp {
. . . . . . . . . . . ● left: Identifier { x }
. . . . . . . . . . . ● op: Plus { + }
. . . . . . . . . . . ● right: Identifier { y }
. . . . . . . . . . }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . . CallExpr {
. . . . . . ● fun: Identifier { close }
. . . . . . ● args: List {
. . . . . . . Identifier { c }
. . . . . . }
. . . . . }
. . . . }
. . . }
. . }
. . FuncDecl {
. . . ● name: Identifier { main }
. . . ● type: FuncType {
. . . . ● params: List {  }
. . . }
. . . ● body: BlockStmt {
. . . . ● list: List {
. . . . . ShortVarDecl {
. . . . . . ● names: List {
. . . . . . . Identifier { c }
. . . . . . }
. . . . . . ● values: List {
. . . . . . . CallExpr {
. . . . . . . . ● fun: Identifier { make }
. . . . . . . . ● args: List {
. . . . . . . . . ChanType {
. . . . . . . . . . ● elemsType: TypeIdent {
. . . . . . . . . . . ● name: Identifier { int }
. . . . . . . . . . }
. . . . . . . . . }
. . . . . . . . . IntLit { 10 }
. . . . . . . . }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . . GoStmt {
. . . . . . ● call: CallExpr {
. . . . . . . ● fun: Identifier { fibonacci }
. . . . . . . ● args: List {
. . . . . . . . CallExpr {
. . . . . . . . . ● fun: Identifier { cap }
. . . . . . . . . ● args: List {
. . . . . . . . . . Identifier { c }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . . Identifier { c }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . . ForStmt {
. . . . . . ● clause: RangeClause {
. . . . . . . ● left: List {
. . . . . . . . Identifier { i }
. . . . . . . }
. . . . . . . ● right: Identifier { c }
. . . . . . }
. . . . . . ● body: BlockStmt {
. . . . . . . ● list: List {
. . . . . . . . CallExpr {
. . . . . . . . . ● fun: SelectorExpr {
. . . . . . . . . . ● x: Identifier { fmt }
. . . . . . . . . . ● sel: Identifier { Println }
. . . . . . . . . }
. . . . . . . . . ● args: List {
. . . . . . . . . . Identifier { i }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . }
. . . }
. . }
. }
}
