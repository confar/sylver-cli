File {
. ● name: Identifier { main }
. ● decls: List {
. . ImportDecl {
. . . ● specs: List {
. . . . ImportSpec {
. . . . . ● path: InterpretedStringLit { "fmt" }
. . . . }
. . . . ImportSpec {
. . . . . ● path: InterpretedStringLit { "strings" }
. . . . }
. . . }
. . }
. . FuncDecl {
. . . ● name: Identifier { main }
. . . ● type: FuncType {
. . . . ● params: List {  }
. . . }
. . . ● body: BlockStmt {
. . . . ● list: List {
. . . . . ShortVarDecl {
. . . . . . ● names: List {
. . . . . . . Identifier { board }
. . . . . . }
. . . . . . ● values: List {
. . . . . . . CompositeLit {
. . . . . . . . ● type: SliceType {
. . . . . . . . . ● elemsType: SliceType {
. . . . . . . . . . ● elemsType: TypeIdent {
. . . . . . . . . . . ● name: Identifier { string }
. . . . . . . . . . }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . . ● body: LiteralValue {
. . . . . . . . . ● elements: List {
. . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . ● value: CompositeLit {
. . . . . . . . . . . . ● type: SliceType {
. . . . . . . . . . . . . ● elemsType: TypeIdent {
. . . . . . . . . . . . . . ● name: Identifier { string }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . . ● body: LiteralValue {
. . . . . . . . . . . . . ● elements: List {
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . }
. . . . . . . . . . }
. . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . ● value: CompositeLit {
. . . . . . . . . . . . ● type: SliceType {
. . . . . . . . . . . . . ● elemsType: TypeIdent {
. . . . . . . . . . . . . . ● name: Identifier { string }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . . ● body: LiteralValue {
. . . . . . . . . . . . . ● elements: List {
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . }
. . . . . . . . . . }
. . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . ● value: CompositeLit {
. . . . . . . . . . . . ● type: SliceType {
. . . . . . . . . . . . . ● elemsType: TypeIdent {
. . . . . . . . . . . . . . ● name: Identifier { string }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . . ● body: LiteralValue {
. . . . . . . . . . . . . ● elements: List {
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . . CompositeLitElem {
. . . . . . . . . . . . . . . ● value: InterpretedStringLit { "_" }
. . . . . . . . . . . . . . }
. . . . . . . . . . . . . }
. . . . . . . . . . . . }
. . . . . . . . . . . }
. . . . . . . . . . }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . . AssignStmt {
. . . . . . ● lhs: List {
. . . . . . . IndexExpr {
. . . . . . . . ● operand: IndexExpr {
. . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . ● index: IntLit { 0 }
. . . . . . . . }
. . . . . . . . ● index: IntLit { 0 }
. . . . . . . }
. . . . . . }
. . . . . . ● rhs: List {
. . . . . . . InterpretedStringLit { "X" }
. . . . . . }
. . . . . }
. . . . . AssignStmt {
. . . . . . ● lhs: List {
. . . . . . . IndexExpr {
. . . . . . . . ● operand: IndexExpr {
. . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . ● index: IntLit { 2 }
. . . . . . . . }
. . . . . . . . ● index: IntLit { 2 }
. . . . . . . }
. . . . . . }
. . . . . . ● rhs: List {
. . . . . . . InterpretedStringLit { "O" }
. . . . . . }
. . . . . }
. . . . . AssignStmt {
. . . . . . ● lhs: List {
. . . . . . . IndexExpr {
. . . . . . . . ● operand: IndexExpr {
. . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . ● index: IntLit { 1 }
. . . . . . . . }
. . . . . . . . ● index: IntLit { 2 }
. . . . . . . }
. . . . . . }
. . . . . . ● rhs: List {
. . . . . . . InterpretedStringLit { "X" }
. . . . . . }
. . . . . }
. . . . . AssignStmt {
. . . . . . ● lhs: List {
. . . . . . . IndexExpr {
. . . . . . . . ● operand: IndexExpr {
. . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . ● index: IntLit { 1 }
. . . . . . . . }
. . . . . . . . ● index: IntLit { 0 }
. . . . . . . }
. . . . . . }
. . . . . . ● rhs: List {
. . . . . . . InterpretedStringLit { "O" }
. . . . . . }
. . . . . }
. . . . . AssignStmt {
. . . . . . ● lhs: List {
. . . . . . . IndexExpr {
. . . . . . . . ● operand: IndexExpr {
. . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . ● index: IntLit { 0 }
. . . . . . . . }
. . . . . . . . ● index: IntLit { 2 }
. . . . . . . }
. . . . . . }
. . . . . . ● rhs: List {
. . . . . . . InterpretedStringLit { "X" }
. . . . . . }
. . . . . }
. . . . . ForStmt {
. . . . . . ● clause: ForClause {
. . . . . . . ● initializer: ShortVarDecl {
. . . . . . . . ● names: List {
. . . . . . . . . Identifier { i }
. . . . . . . . }
. . . . . . . . ● values: List {
. . . . . . . . . IntLit { 0 }
. . . . . . . . }
. . . . . . . }
. . . . . . . ● condition: BinOp {
. . . . . . . . ● left: Identifier { i }
. . . . . . . . ● op: Inf { < }
. . . . . . . . ● right: CallExpr {
. . . . . . . . . ● fun: Identifier { len }
. . . . . . . . . ● args: List {
. . . . . . . . . . Identifier { board }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . }
. . . . . . . ● update: UnOp {
. . . . . . . . ● value: Identifier { i }
. . . . . . . . ● op: Increment { ++ }
. . . . . . . }
. . . . . . }
. . . . . . ● body: BlockStmt {
. . . . . . . ● list: List {
. . . . . . . . CallExpr {
. . . . . . . . . ● fun: SelectorExpr {
. . . . . . . . . . ● x: Identifier { fmt }
. . . . . . . . . . ● sel: Identifier { Printf }
. . . . . . . . . }
. . . . . . . . . ● args: List {
. . . . . . . . . . InterpretedStringLit { "%s\n" }
. . . . . . . . . . CallExpr {
. . . . . . . . . . . ● fun: SelectorExpr {
. . . . . . . . . . . . ● x: Identifier { strings }
. . . . . . . . . . . . ● sel: Identifier { Join }
. . . . . . . . . . . }
. . . . . . . . . . . ● args: List {
. . . . . . . . . . . . IndexExpr {
. . . . . . . . . . . . . ● operand: Identifier { board }
. . . . . . . . . . . . . ● index: Identifier { i }
. . . . . . . . . . . . }
. . . . . . . . . . . . InterpretedStringLit { " " }
. . . . . . . . . . . }
. . . . . . . . . . }
. . . . . . . . . }
. . . . . . . . }
. . . . . . . }
. . . . . . }
. . . . . }
. . . . }
. . . }
. . }
. }
}
